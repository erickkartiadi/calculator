{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","display","setDisplay","result","setResult","handleInput","e","currentTarget","dataset","number","handleCalculate","results","eval","handleClear","handleDelete","slice","className","onClick","data-number","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"woBAGA,SAASA,MAAO,IAAD,UACiBC,oDAAS,IAD1B,oLACNC,QADM,cACGC,WADH,yBAEeF,oDAAS,IAFxB,qLAENG,OAFM,cAEEC,UAFF,cAGPC,YAAc,SAACC,GACnBJ,WAAWD,QAAUK,EAAEC,cAAcC,QAAQC,SAGzCC,gBAAkB,SAAlBA,gBAAmBJ,GACvB,IAAMK,QAAUC,KAAKX,SACrBG,UAAUO,UAGNE,YAAc,WAClBX,WAAW,IACXE,UAAU,KAENU,aAAe,WACnBZ,WAAWD,QAAQc,MAAM,GAAI,KAE/B,OACE,kEAAKC,UAAU,OACb,kEAAKA,UAAU,cACb,kEAAKA,UAAU,WACb,kEAAKA,UAAU,aAAaf,SAC5B,kEAAKe,UAAU,UAAUb,SAG3B,sEACE,wEACE,qEACE,qEACE,qEAAQa,UAAU,SAASC,QAASJ,aAApC,MAIF,qEACE,qEAAQK,cAAY,IAAID,QAASZ,aAAjC,MAIF,qEACE,qEAAQa,cAAY,IAAID,QAASZ,aAAjC,MAIF,qEACE,qEACEW,UAAU,YACVE,cAAY,IACZD,QAASZ,aAHX,OASJ,qEACE,qEACE,qEAAQa,cAAY,IAAID,QAASZ,aAAjC,MAIF,qEACE,qEAAQa,cAAY,IAAID,QAASZ,aAAjC,MAIF,qEACE,qEAAQa,cAAY,IAAID,QAASZ,aAAjC,MAIF,qEACE,qEACEW,UAAU,YACVE,cAAY,IACZD,QAASZ,aAHX,OASJ,qEACE,qEACE,qEAAQa,cAAY,IAAID,QAASZ,aAAjC,MAIF,qEACE,qEAAQa,cAAY,IAAID,QAASZ,aAAjC,MAIF,qEACE,qEAAQa,cAAY,IAAID,QAASZ,aAAjC,MAIF,qEACE,qEACEW,UAAU,YACVE,cAAY,IACZD,QAASZ,aAHX,OASJ,qEACE,qEACE,qEAAQa,cAAY,IAAID,QAASZ,aAAjC,MAIF,qEACE,qEAAQa,cAAY,IAAID,QAASZ,aAAjC,MAIF,qEACE,qEAAQa,cAAY,IAAID,QAASZ,aAAjC,MAIF,qEACE,qEACEW,UAAU,YACVE,cAAY,IACZD,QAASZ,aAHX,OASJ,qEACE,qEACE,qEAAQa,cAAY,IAAID,QAASZ,aAAjC,MAIF,qEACE,qEAAQa,cAAY,IAAID,QAASZ,aAAjC,MAIF,qEACE,qEAAQW,UAAU,YAAYC,QAASH,cACrC,gEAAGK,MAAM,sBAGb,qEACE,qEAAQH,UAAU,MAAMC,QAASP,iBAAjC,WAYDX,2B,gKCzJKqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC5B,EAAA,EAAD,OAEF6B,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.492199c3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [display, setDisplay] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const handleInput = (e) => {\n    setDisplay(display + e.currentTarget.dataset.number);\n  };\n\n  const handleCalculate = (e) => {\n    const results = eval(display);\n    setResult(results);\n  };\n\n  const handleClear = () => {\n    setDisplay(\"\");\n    setResult(\"\");\n  };\n  const handleDelete = () => {\n    setDisplay(display.slice(0, -1));\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"calculator\">\n        <div className=\"display\">\n          <div className=\"operation\">{display}</div>\n          <div className=\"result\">{result}</div>\n        </div>\n\n        <div>\n          <table>\n            <tr>\n              <td>\n                <button className=\"yellow\" onClick={handleClear}>\n                  C\n                </button>\n              </td>\n              <td>\n                <button data-number=\"(\" onClick={handleInput}>\n                  (\n                </button>\n              </td>\n              <td>\n                <button data-number=\")\" onClick={handleInput}>\n                  )\n                </button>\n              </td>\n              <td>\n                <button\n                  className=\"light-red\"\n                  data-number=\"*\"\n                  onClick={handleInput}\n                >\n                  x\n                </button>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <button data-number=\"7\" onClick={handleInput}>\n                  7\n                </button>\n              </td>\n              <td>\n                <button data-number=\"8\" onClick={handleInput}>\n                  8\n                </button>\n              </td>\n              <td>\n                <button data-number=\"9\" onClick={handleInput}>\n                  9\n                </button>\n              </td>\n              <td>\n                <button\n                  className=\"light-red\"\n                  data-number=\"/\"\n                  onClick={handleInput}\n                >\n                  :\n                </button>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <button data-number=\"4\" onClick={handleInput}>\n                  4\n                </button>\n              </td>\n              <td>\n                <button data-number=\"5\" onClick={handleInput}>\n                  5\n                </button>\n              </td>\n              <td>\n                <button data-number=\"6\" onClick={handleInput}>\n                  6\n                </button>\n              </td>\n              <td>\n                <button\n                  className=\"light-red\"\n                  data-number=\"-\"\n                  onClick={handleInput}\n                >\n                  -\n                </button>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <button data-number=\"1\" onClick={handleInput}>\n                  1\n                </button>\n              </td>\n              <td>\n                <button data-number=\"2\" onClick={handleInput}>\n                  2\n                </button>\n              </td>\n              <td>\n                <button data-number=\"3\" onClick={handleInput}>\n                  3\n                </button>\n              </td>\n              <td>\n                <button\n                  className=\"light-red\"\n                  data-number=\"+\"\n                  onClick={handleInput}\n                >\n                  +\n                </button>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <button data-number=\"0\" onClick={handleInput}>\n                  0\n                </button>\n              </td>\n              <td>\n                <button data-number=\".\" onClick={handleInput}>\n                  .\n                </button>\n              </td>\n              <td>\n                <button className=\"dark-grey\" onClick={handleDelete}>\n                  <i class=\"fa fa-backspace\"></i>\n                </button>\n              </td>\n              <td>\n                <button className=\"red\" onClick={handleCalculate}>\n                  =\n                </button>\n              </td>\n            </tr>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}